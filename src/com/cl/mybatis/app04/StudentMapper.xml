<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性是名称空间，必须唯一 -->
<mapper namespace="com.cl.mybatis.app04.Student">

	<!--resultMap 映射实体与表的关系 -
		type属性：表示实体全路径名
		id属性：为实体与表的映射取一个唯一的编号
	 -->
	<resultMap type="student" id="studentMap">
		<!-- id标签:映射主键属性
			 result标签：映射非主键属性
		     property属性:实体的属性名
		     column属性：表的字段名	 
		-->	
		<id property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="sal" column="sal"/>
	</resultMap>
	
	<!-- 
		insert标签：要书写insert这么一个sql语句
		id属性：为insert这么一个sql语句取一个任意唯一的名字
		parameterType:要执行的dao中的方法的参数，如果是类的话，必须使用全路径类
	-->
	<insert id="add1" >
		insert into students (id,name,sal) values(1,'小明',7000);
	</insert>
	
	<!-- 新增学生 -->
	<insert id="add2" parameterType="student">
		insert into students(id,name,sal) values(#{id},#{name},#{sal})
	</insert>
	
	<!-- 根据id查找Student -->
	<select id="findStudentByKye" parameterType="int" resultType="student">
		select * from students where id=#{id}
	</select>
	
	
	<!-- 根据id查找Student
		mybatis会将查询出来的记录和studentMap这个id所对应的映射结果相互匹配 -->
	<select id="findStudentByKye2" parameterType="int" resultMap="studentMap">
		select id,name,sal from students where id=#{id}
	</select>
	
	<!-- 查询所有学生 
		理论上resultType要写List<Student>
		但实际上只用写List中的类型即可，Student就行了
	-->
	<select id="findAll" resultType="student">
		select id,name,sal from students
	</select>
	
	<!-- 带分页查询记录 -->
	<select id="findByNameWithPage" parameterType="map" resultMap="studentMap">
		select id,name,sal from students where name like #{pName} limit #{pStart},#{pPageSize}
	</select>
	
	<!-- 动态sql解决不定几项条件查询问题，不用再去拼接1=1 -->
	<select id="findByWhereWithPage" parameterType="map" resultMap="studentMap">
		select id,name,sal from students 
		<where>
			<if test="pId!=null">
				and id=#{pId}
			</if>
			<if test="pName!=null">
				and name like #{pName}
			</if>
			<if test="pSal!=null">
				and sal=#{pSal}
			</if>
		</where>
		limit #{pStart},#{pPageSize}
	</select>
	
	<!-- 更新学生 -->
	<update id="updateStudent" parameterType="student" >
		update students set name=#{name},sal=#{sal} where id=#{id}
	</update>
	
	
	<!-- 根据id删除学生 -->
	<delete id="deleteStudentByID" parameterType="student">
		delete from students where id=#{id}
	</delete>
	
	<!-- 
		注意：这个insert/update/delete标签只是一个模板，在做操作时，其实是以SQL语句为核心的
		     即在做增/删/时，insert/update/delete标签可通用，
		     但做查询时只能用select标签
		     我们提倡什么操作就用什么标签
	 -->

</mapper>